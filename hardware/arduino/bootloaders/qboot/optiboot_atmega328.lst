
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  00007e00  00007e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  00000236  2**0
                  CONTENTS, READONLY
  2 .stab         00000b1c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a34  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
    7e00:	11 24       	eor	r1, r1
    7e02:	84 b7       	in	r24, 0x34	; 52
    7e04:	14 be       	out	0x34, r1	; 52
    7e06:	81 ff       	sbrs	r24, 1
    7e08:	e7 d0       	rcall	.+462    	; 0x7fd8 <appStart>
    7e0a:	82 e0       	ldi	r24, 0x02	; 2
    7e0c:	80 93 c0 00 	sts	0x00C0, r24
    7e10:	88 e1       	ldi	r24, 0x18	; 24
    7e12:	80 93 c1 00 	sts	0x00C1, r24
    7e16:	86 e0       	ldi	r24, 0x06	; 6
    7e18:	80 93 c2 00 	sts	0x00C2, r24
    7e1c:	80 e1       	ldi	r24, 0x10	; 16
    7e1e:	80 93 c4 00 	sts	0x00C4, r24
    7e22:	8e e0       	ldi	r24, 0x0E	; 14
    7e24:	c3 d0       	rcall	.+390    	; 0x7fac <watchdogConfig>
    7e26:	25 9a       	sbi	0x04, 5	; 4
    7e28:	cc 24       	eor	r12, r12
    7e2a:	c3 94       	inc	r12
    7e2c:	f5 e0       	ldi	r31, 0x05	; 5
    7e2e:	df 2e       	mov	r13, r31
    7e30:	e1 e1       	ldi	r30, 0x11	; 17
    7e32:	ee 2e       	mov	r14, r30
    7e34:	73 e0       	ldi	r23, 0x03	; 3
    7e36:	f7 2e       	mov	r15, r23
    7e38:	ad d0       	rcall	.+346    	; 0x7f94 <getch>
    7e3a:	81 34       	cpi	r24, 0x41	; 65
    7e3c:	89 f4       	brne	.+34     	; 0x7e60 <main+0x60>
    7e3e:	aa d0       	rcall	.+340    	; 0x7f94 <getch>
    7e40:	89 83       	std	Y+1, r24	; 0x01
    7e42:	ba d0       	rcall	.+372    	; 0x7fb8 <verifySpace>
    7e44:	89 81       	ldd	r24, Y+1	; 0x01
    7e46:	82 38       	cpi	r24, 0x82	; 130
    7e48:	19 f4       	brne	.+6      	; 0x7e50 <main+0x50>
    7e4a:	84 e0       	ldi	r24, 0x04	; 4
    7e4c:	9c d0       	rcall	.+312    	; 0x7f86 <putch>
    7e4e:	98 c0       	rjmp	.+304    	; 0x7f80 <main+0x180>
    7e50:	81 38       	cpi	r24, 0x81	; 129
    7e52:	19 f4       	brne	.+6      	; 0x7e5a <main+0x5a>
    7e54:	84 e0       	ldi	r24, 0x04	; 4
    7e56:	97 d0       	rcall	.+302    	; 0x7f86 <putch>
    7e58:	93 c0       	rjmp	.+294    	; 0x7f80 <main+0x180>
    7e5a:	83 e0       	ldi	r24, 0x03	; 3
    7e5c:	94 d0       	rcall	.+296    	; 0x7f86 <putch>
    7e5e:	90 c0       	rjmp	.+288    	; 0x7f80 <main+0x180>
    7e60:	82 34       	cpi	r24, 0x42	; 66
    7e62:	19 f4       	brne	.+6      	; 0x7e6a <main+0x6a>
    7e64:	84 e1       	ldi	r24, 0x14	; 20
    7e66:	b0 d0       	rcall	.+352    	; 0x7fc8 <getNch>
    7e68:	8b c0       	rjmp	.+278    	; 0x7f80 <main+0x180>
    7e6a:	85 34       	cpi	r24, 0x45	; 69
    7e6c:	19 f4       	brne	.+6      	; 0x7e74 <main+0x74>
    7e6e:	85 e0       	ldi	r24, 0x05	; 5
    7e70:	ab d0       	rcall	.+342    	; 0x7fc8 <getNch>
    7e72:	86 c0       	rjmp	.+268    	; 0x7f80 <main+0x180>
    7e74:	85 35       	cpi	r24, 0x55	; 85
    7e76:	69 f4       	brne	.+26     	; 0x7e92 <main+0x92>
    7e78:	8d d0       	rcall	.+282    	; 0x7f94 <getch>
    7e7a:	08 2f       	mov	r16, r24
    7e7c:	10 e0       	ldi	r17, 0x00	; 0
    7e7e:	8a d0       	rcall	.+276    	; 0x7f94 <getch>
    7e80:	90 e0       	ldi	r25, 0x00	; 0
    7e82:	98 2e       	mov	r9, r24
    7e84:	88 24       	eor	r8, r8
    7e86:	80 2a       	or	r8, r16
    7e88:	91 2a       	or	r9, r17
    7e8a:	88 0c       	add	r8, r8
    7e8c:	99 1c       	adc	r9, r9
    7e8e:	94 d0       	rcall	.+296    	; 0x7fb8 <verifySpace>
    7e90:	77 c0       	rjmp	.+238    	; 0x7f80 <main+0x180>
    7e92:	86 35       	cpi	r24, 0x56	; 86
    7e94:	29 f4       	brne	.+10     	; 0x7ea0 <main+0xa0>
    7e96:	84 e0       	ldi	r24, 0x04	; 4
    7e98:	97 d0       	rcall	.+302    	; 0x7fc8 <getNch>
    7e9a:	80 e0       	ldi	r24, 0x00	; 0
    7e9c:	74 d0       	rcall	.+232    	; 0x7f86 <putch>
    7e9e:	70 c0       	rjmp	.+224    	; 0x7f80 <main+0x180>
    7ea0:	84 36       	cpi	r24, 0x64	; 100
    7ea2:	09 f0       	breq	.+2      	; 0x7ea6 <main+0xa6>
    7ea4:	43 c0       	rjmp	.+134    	; 0x7f2c <main+0x12c>
    7ea6:	76 d0       	rcall	.+236    	; 0x7f94 <getch>
    7ea8:	75 d0       	rcall	.+234    	; 0x7f94 <getch>
    7eaa:	b8 2e       	mov	r11, r24
    7eac:	73 d0       	rcall	.+230    	; 0x7f94 <getch>
    7eae:	80 e0       	ldi	r24, 0x00	; 0
    7eb0:	88 16       	cp	r8, r24
    7eb2:	88 e3       	ldi	r24, 0x38	; 56
    7eb4:	98 06       	cpc	r9, r24
    7eb6:	30 f4       	brcc	.+12     	; 0x7ec4 <main+0xc4>
    7eb8:	f4 01       	movw	r30, r8
    7eba:	f7 be       	out	0x37, r15	; 55
    7ebc:	e8 95       	spm
    7ebe:	00 e0       	ldi	r16, 0x00	; 0
    7ec0:	11 e0       	ldi	r17, 0x01	; 1
    7ec2:	02 c0       	rjmp	.+4      	; 0x7ec8 <main+0xc8>
    7ec4:	00 e0       	ldi	r16, 0x00	; 0
    7ec6:	11 e0       	ldi	r17, 0x01	; 1
    7ec8:	65 d0       	rcall	.+202    	; 0x7f94 <getch>
    7eca:	f8 01       	movw	r30, r16
    7ecc:	81 93       	st	Z+, r24
    7ece:	8f 01       	movw	r16, r30
    7ed0:	be 16       	cp	r11, r30
    7ed2:	d1 f7       	brne	.-12     	; 0x7ec8 <main+0xc8>
    7ed4:	f0 e0       	ldi	r31, 0x00	; 0
    7ed6:	8f 16       	cp	r8, r31
    7ed8:	f8 e3       	ldi	r31, 0x38	; 56
    7eda:	9f 06       	cpc	r9, r31
    7edc:	18 f0       	brcs	.+6      	; 0x7ee4 <main+0xe4>
    7ede:	f4 01       	movw	r30, r8
    7ee0:	f7 be       	out	0x37, r15	; 55
    7ee2:	e8 95       	spm
    7ee4:	69 d0       	rcall	.+210    	; 0x7fb8 <verifySpace>
    7ee6:	07 b6       	in	r0, 0x37	; 55
    7ee8:	00 fc       	sbrc	r0, 0
    7eea:	fd cf       	rjmp	.-6      	; 0x7ee6 <main+0xe6>
    7eec:	f4 01       	movw	r30, r8
    7eee:	a0 e0       	ldi	r26, 0x00	; 0
    7ef0:	b1 e0       	ldi	r27, 0x01	; 1
    7ef2:	2c 91       	ld	r18, X
    7ef4:	30 e0       	ldi	r19, 0x00	; 0
    7ef6:	11 96       	adiw	r26, 0x01	; 1
    7ef8:	8c 91       	ld	r24, X
    7efa:	11 97       	sbiw	r26, 0x01	; 1
    7efc:	90 e0       	ldi	r25, 0x00	; 0
    7efe:	98 2f       	mov	r25, r24
    7f00:	88 27       	eor	r24, r24
    7f02:	82 2b       	or	r24, r18
    7f04:	93 2b       	or	r25, r19
    7f06:	12 96       	adiw	r26, 0x02	; 2
    7f08:	0c 01       	movw	r0, r24
    7f0a:	c7 be       	out	0x37, r12	; 55
    7f0c:	e8 95       	spm
    7f0e:	11 24       	eor	r1, r1
    7f10:	32 96       	adiw	r30, 0x02	; 2
    7f12:	81 e0       	ldi	r24, 0x01	; 1
    7f14:	a0 38       	cpi	r26, 0x80	; 128
    7f16:	b8 07       	cpc	r27, r24
    7f18:	61 f7       	brne	.-40     	; 0x7ef2 <main+0xf2>
    7f1a:	f4 01       	movw	r30, r8
    7f1c:	d7 be       	out	0x37, r13	; 55
    7f1e:	e8 95       	spm
    7f20:	07 b6       	in	r0, 0x37	; 55
    7f22:	00 fc       	sbrc	r0, 0
    7f24:	fd cf       	rjmp	.-6      	; 0x7f20 <main+0x120>
    7f26:	e7 be       	out	0x37, r14	; 55
    7f28:	e8 95       	spm
    7f2a:	2a c0       	rjmp	.+84     	; 0x7f80 <main+0x180>
    7f2c:	84 37       	cpi	r24, 0x74	; 116
    7f2e:	b9 f4       	brne	.+46     	; 0x7f5e <main+0x15e>
    7f30:	31 d0       	rcall	.+98     	; 0x7f94 <getch>
    7f32:	30 d0       	rcall	.+96     	; 0x7f94 <getch>
    7f34:	a8 2e       	mov	r10, r24
    7f36:	2e d0       	rcall	.+92     	; 0x7f94 <getch>
    7f38:	3f d0       	rcall	.+126    	; 0x7fb8 <verifySpace>
    7f3a:	ba 2c       	mov	r11, r10
    7f3c:	f4 01       	movw	r30, r8
    7f3e:	01 c0       	rjmp	.+2      	; 0x7f42 <main+0x142>
    7f40:	f8 01       	movw	r30, r16
    7f42:	8f 01       	movw	r16, r30
    7f44:	0f 5f       	subi	r16, 0xFF	; 255
    7f46:	1f 4f       	sbci	r17, 0xFF	; 255
    7f48:	84 91       	lpm	r24, Z+
    7f4a:	1d d0       	rcall	.+58     	; 0x7f86 <putch>
    7f4c:	ba 94       	dec	r11
    7f4e:	c1 f7       	brne	.-16     	; 0x7f40 <main+0x140>
    7f50:	08 94       	sec
    7f52:	81 1c       	adc	r8, r1
    7f54:	91 1c       	adc	r9, r1
    7f56:	aa 94       	dec	r10
    7f58:	8a 0c       	add	r8, r10
    7f5a:	91 1c       	adc	r9, r1
    7f5c:	11 c0       	rjmp	.+34     	; 0x7f80 <main+0x180>
    7f5e:	85 37       	cpi	r24, 0x75	; 117
    7f60:	41 f4       	brne	.+16     	; 0x7f72 <main+0x172>
    7f62:	2a d0       	rcall	.+84     	; 0x7fb8 <verifySpace>
    7f64:	8e e1       	ldi	r24, 0x1E	; 30
    7f66:	0f d0       	rcall	.+30     	; 0x7f86 <putch>
    7f68:	85 e9       	ldi	r24, 0x95	; 149
    7f6a:	0d d0       	rcall	.+26     	; 0x7f86 <putch>
    7f6c:	8f e0       	ldi	r24, 0x0F	; 15
    7f6e:	0b d0       	rcall	.+22     	; 0x7f86 <putch>
    7f70:	07 c0       	rjmp	.+14     	; 0x7f80 <main+0x180>
    7f72:	81 35       	cpi	r24, 0x51	; 81
    7f74:	21 f4       	brne	.+8      	; 0x7f7e <main+0x17e>
    7f76:	88 e0       	ldi	r24, 0x08	; 8
    7f78:	19 d0       	rcall	.+50     	; 0x7fac <watchdogConfig>
    7f7a:	1e d0       	rcall	.+60     	; 0x7fb8 <verifySpace>
    7f7c:	01 c0       	rjmp	.+2      	; 0x7f80 <main+0x180>
    7f7e:	1c d0       	rcall	.+56     	; 0x7fb8 <verifySpace>
    7f80:	80 e1       	ldi	r24, 0x10	; 16
    7f82:	01 d0       	rcall	.+2      	; 0x7f86 <putch>
    7f84:	59 cf       	rjmp	.-334    	; 0x7e38 <main+0x38>

00007f86 <putch>:
}

void putch(char ch)
{
#ifndef SOFT_UART
	while (!(UCSR0A & _BV(UDRE0)))
    7f86:	90 91 c0 00 	lds	r25, 0x00C0
    7f8a:	95 ff       	sbrs	r25, 5
    7f8c:	fc cf       	rjmp	.-8      	; 0x7f86 <putch>
		;
	UDR0 = ch;
    7f8e:	80 93 c6 00 	sts	0x00C6, r24
			[uartBit] "I" (UART_TX_BIT)
			:
			"r25"
	);
#endif
}
    7f92:	08 95       	ret

00007f94 <getch>:
			[uartBit] "I" (UART_RX_BIT)
			:
			"r25"
	);
#else
	while (!(UCSR0A & _BV(RXC0)))
    7f94:	80 91 c0 00 	lds	r24, 0x00C0
    7f98:	87 ff       	sbrs	r24, 7
    7f9a:	fc cf       	rjmp	.-8      	; 0x7f94 <getch>
		;
	if (!(UCSR0A & _BV(FE0)))
    7f9c:	80 91 c0 00 	lds	r24, 0x00C0
    7fa0:	84 fd       	sbrc	r24, 4
    7fa2:	01 c0       	rjmp	.+2      	; 0x7fa6 <getch+0x12>
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset()
{
	__asm__ __volatile__ (
    7fa4:	a8 95       	wdr
		 * don't care that an invalid char is returned...)
		 */
		watchdogReset();
	}

	ch = UDR0;
    7fa6:	80 91 c6 00 	lds	r24, 0x00C6
	LED_PIN |= _BV(LED);
#endif
#endif

	return ch;
}
    7faa:	08 95       	ret

00007fac <watchdogConfig>:
	);
}

void watchdogConfig(uint8_t x)
{
	WDTCSR = _BV(WDCE) | _BV(WDE);
    7fac:	e0 e6       	ldi	r30, 0x60	; 96
    7fae:	f0 e0       	ldi	r31, 0x00	; 0
    7fb0:	98 e1       	ldi	r25, 0x18	; 24
    7fb2:	90 83       	st	Z, r25
	WDTCSR = x;
    7fb4:	80 83       	st	Z, r24
}
    7fb6:	08 95       	ret

00007fb8 <verifySpace>:
	verifySpace();
}

void verifySpace()
{
	if (getch() != CRC_EOP)
    7fb8:	ed df       	rcall	.-38     	; 0x7f94 <getch>
    7fba:	80 32       	cpi	r24, 0x20	; 32
    7fbc:	19 f0       	breq	.+6      	; 0x7fc4 <verifySpace+0xc>
	{
		watchdogConfig(WATCHDOG_16MS); // shorten WD timeout
    7fbe:	88 e0       	ldi	r24, 0x08	; 8
    7fc0:	f5 df       	rcall	.-22     	; 0x7fac <watchdogConfig>
    7fc2:	ff cf       	rjmp	.-2      	; 0x7fc2 <verifySpace+0xa>
		while (1)
			// and busy-loop so that WD causes
			;//  a reset and app start.
	}
	putch(STK_INSYNC);
    7fc4:	84 e1       	ldi	r24, 0x14	; 20
    7fc6:	df cf       	rjmp	.-66     	; 0x7f86 <putch>

00007fc8 <getNch>:
	);
}
#endif

void getNch(uint8_t count)
{
    7fc8:	1f 93       	push	r17
    7fca:	18 2f       	mov	r17, r24
	do
		getch();
    7fcc:	e3 df       	rcall	.-58     	; 0x7f94 <getch>
	while (--count);
    7fce:	11 50       	subi	r17, 0x01	; 1
    7fd0:	e9 f7       	brne	.-6      	; 0x7fcc <getNch+0x4>
	verifySpace();
    7fd2:	f2 df       	rcall	.-28     	; 0x7fb8 <verifySpace>
}
    7fd4:	1f 91       	pop	r17
    7fd6:	08 95       	ret

00007fd8 <appStart>:
	WDTCSR = x;
}

void appStart()
{
	watchdogConfig(WATCHDOG_OFF);
    7fd8:	80 e0       	ldi	r24, 0x00	; 0
    7fda:	e8 df       	rcall	.-48     	; 0x7fac <watchdogConfig>
	__asm__ __volatile__ (
    7fdc:	ee 27       	eor	r30, r30
    7fde:	ff 27       	eor	r31, r31
    7fe0:	09 94       	ijmp
