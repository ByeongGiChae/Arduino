
optiboot_m168p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  00003e00  00003e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00003ffe  00003ffe  0000024e  2**0
                  CONTENTS, READONLY
  2 .stab         00000bdc  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c2c  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00003e00 <main>:
    3e00:	11 24       	eor	r1, r1
    3e02:	84 b7       	in	r24, 0x34	; 52
    3e04:	14 be       	out	0x34, r1	; 52
    3e06:	81 ff       	sbrs	r24, 1
    3e08:	f3 d0       	rcall	.+486    	; 0x3ff0 <appStart>
    3e0a:	85 e0       	ldi	r24, 0x05	; 5
    3e0c:	80 93 81 00 	sts	0x0081, r24
    3e10:	82 e0       	ldi	r24, 0x02	; 2
    3e12:	80 93 c0 00 	sts	0x00C0, r24
    3e16:	88 e1       	ldi	r24, 0x18	; 24
    3e18:	80 93 c1 00 	sts	0x00C1, r24
    3e1c:	86 e0       	ldi	r24, 0x06	; 6
    3e1e:	80 93 c2 00 	sts	0x00C2, r24
    3e22:	80 e1       	ldi	r24, 0x10	; 16
    3e24:	80 93 c4 00 	sts	0x00C4, r24
    3e28:	8e e0       	ldi	r24, 0x0E	; 14
    3e2a:	cc d0       	rcall	.+408    	; 0x3fc4 <watchdogConfig>
    3e2c:	25 9a       	sbi	0x04, 5	; 4
    3e2e:	96 e0       	ldi	r25, 0x06	; 6
    3e30:	20 e3       	ldi	r18, 0x30	; 48
    3e32:	3c ef       	ldi	r19, 0xFC	; 252
    3e34:	51 e0       	ldi	r21, 0x01	; 1
    3e36:	40 e2       	ldi	r20, 0x20	; 32
    3e38:	30 93 85 00 	sts	0x0085, r19
    3e3c:	20 93 84 00 	sts	0x0084, r18
    3e40:	56 bb       	out	0x16, r21	; 22
    3e42:	b0 9b       	sbis	0x16, 0	; 22
    3e44:	fe cf       	rjmp	.-4      	; 0x3e42 <main+0x42>
    3e46:	85 b1       	in	r24, 0x05	; 5
    3e48:	84 27       	eor	r24, r20
    3e4a:	85 b9       	out	0x05, r24	; 5
    3e4c:	a8 95       	wdr
    3e4e:	91 50       	subi	r25, 0x01	; 1
    3e50:	99 f7       	brne	.-26     	; 0x3e38 <main+0x38>
    3e52:	cc 24       	eor	r12, r12
    3e54:	dd 24       	eor	r13, r13
    3e56:	88 24       	eor	r8, r8
    3e58:	83 94       	inc	r8
    3e5a:	b5 e0       	ldi	r27, 0x05	; 5
    3e5c:	ab 2e       	mov	r10, r27
    3e5e:	a1 e1       	ldi	r26, 0x11	; 17
    3e60:	9a 2e       	mov	r9, r26
    3e62:	f3 e0       	ldi	r31, 0x03	; 3
    3e64:	bf 2e       	mov	r11, r31
    3e66:	a2 d0       	rcall	.+324    	; 0x3fac <getch>
    3e68:	81 34       	cpi	r24, 0x41	; 65
    3e6a:	61 f4       	brne	.+24     	; 0x3e84 <main+0x84>
    3e6c:	9f d0       	rcall	.+318    	; 0x3fac <getch>
    3e6e:	08 2f       	mov	r16, r24
    3e70:	af d0       	rcall	.+350    	; 0x3fd0 <verifySpace>
    3e72:	02 38       	cpi	r16, 0x82	; 130
    3e74:	11 f0       	breq	.+4      	; 0x3e7a <main+0x7a>
    3e76:	01 38       	cpi	r16, 0x81	; 129
    3e78:	11 f4       	brne	.+4      	; 0x3e7e <main+0x7e>
    3e7a:	84 e0       	ldi	r24, 0x04	; 4
    3e7c:	01 c0       	rjmp	.+2      	; 0x3e80 <main+0x80>
    3e7e:	83 e0       	ldi	r24, 0x03	; 3
    3e80:	8d d0       	rcall	.+282    	; 0x3f9c <putch>
    3e82:	89 c0       	rjmp	.+274    	; 0x3f96 <main+0x196>
    3e84:	82 34       	cpi	r24, 0x42	; 66
    3e86:	11 f4       	brne	.+4      	; 0x3e8c <main+0x8c>
    3e88:	84 e1       	ldi	r24, 0x14	; 20
    3e8a:	03 c0       	rjmp	.+6      	; 0x3e92 <main+0x92>
    3e8c:	85 34       	cpi	r24, 0x45	; 69
    3e8e:	19 f4       	brne	.+6      	; 0x3e96 <main+0x96>
    3e90:	85 e0       	ldi	r24, 0x05	; 5
    3e92:	a6 d0       	rcall	.+332    	; 0x3fe0 <getNch>
    3e94:	80 c0       	rjmp	.+256    	; 0x3f96 <main+0x196>
    3e96:	85 35       	cpi	r24, 0x55	; 85
    3e98:	79 f4       	brne	.+30     	; 0x3eb8 <main+0xb8>
    3e9a:	88 d0       	rcall	.+272    	; 0x3fac <getch>
    3e9c:	e8 2e       	mov	r14, r24
    3e9e:	ff 24       	eor	r15, r15
    3ea0:	85 d0       	rcall	.+266    	; 0x3fac <getch>
    3ea2:	08 2f       	mov	r16, r24
    3ea4:	10 e0       	ldi	r17, 0x00	; 0
    3ea6:	10 2f       	mov	r17, r16
    3ea8:	00 27       	eor	r16, r16
    3eaa:	0e 29       	or	r16, r14
    3eac:	1f 29       	or	r17, r15
    3eae:	00 0f       	add	r16, r16
    3eb0:	11 1f       	adc	r17, r17
    3eb2:	8e d0       	rcall	.+284    	; 0x3fd0 <verifySpace>
    3eb4:	68 01       	movw	r12, r16
    3eb6:	6f c0       	rjmp	.+222    	; 0x3f96 <main+0x196>
    3eb8:	86 35       	cpi	r24, 0x56	; 86
    3eba:	21 f4       	brne	.+8      	; 0x3ec4 <main+0xc4>
    3ebc:	84 e0       	ldi	r24, 0x04	; 4
    3ebe:	90 d0       	rcall	.+288    	; 0x3fe0 <getNch>
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	de cf       	rjmp	.-68     	; 0x3e80 <main+0x80>
    3ec4:	84 36       	cpi	r24, 0x64	; 100
    3ec6:	09 f0       	breq	.+2      	; 0x3eca <main+0xca>
    3ec8:	40 c0       	rjmp	.+128    	; 0x3f4a <main+0x14a>
    3eca:	70 d0       	rcall	.+224    	; 0x3fac <getch>
    3ecc:	6f d0       	rcall	.+222    	; 0x3fac <getch>
    3ece:	08 2f       	mov	r16, r24
    3ed0:	6d d0       	rcall	.+218    	; 0x3fac <getch>
    3ed2:	80 e0       	ldi	r24, 0x00	; 0
    3ed4:	c8 16       	cp	r12, r24
    3ed6:	8c e1       	ldi	r24, 0x1C	; 28
    3ed8:	d8 06       	cpc	r13, r24
    3eda:	18 f4       	brcc	.+6      	; 0x3ee2 <main+0xe2>
    3edc:	f6 01       	movw	r30, r12
    3ede:	b7 be       	out	0x37, r11	; 55
    3ee0:	e8 95       	spm
    3ee2:	c0 e0       	ldi	r28, 0x00	; 0
    3ee4:	d1 e0       	ldi	r29, 0x01	; 1
    3ee6:	62 d0       	rcall	.+196    	; 0x3fac <getch>
    3ee8:	89 93       	st	Y+, r24
    3eea:	0c 17       	cp	r16, r28
    3eec:	e1 f7       	brne	.-8      	; 0x3ee6 <main+0xe6>
    3eee:	f0 e0       	ldi	r31, 0x00	; 0
    3ef0:	cf 16       	cp	r12, r31
    3ef2:	fc e1       	ldi	r31, 0x1C	; 28
    3ef4:	df 06       	cpc	r13, r31
    3ef6:	18 f0       	brcs	.+6      	; 0x3efe <main+0xfe>
    3ef8:	f6 01       	movw	r30, r12
    3efa:	b7 be       	out	0x37, r11	; 55
    3efc:	e8 95       	spm
    3efe:	68 d0       	rcall	.+208    	; 0x3fd0 <verifySpace>
    3f00:	07 b6       	in	r0, 0x37	; 55
    3f02:	00 fc       	sbrc	r0, 0
    3f04:	fd cf       	rjmp	.-6      	; 0x3f00 <main+0x100>
    3f06:	a6 01       	movw	r20, r12
    3f08:	a0 e0       	ldi	r26, 0x00	; 0
    3f0a:	b1 e0       	ldi	r27, 0x01	; 1
    3f0c:	2c 91       	ld	r18, X
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	11 96       	adiw	r26, 0x01	; 1
    3f12:	8c 91       	ld	r24, X
    3f14:	11 97       	sbiw	r26, 0x01	; 1
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	98 2f       	mov	r25, r24
    3f1a:	88 27       	eor	r24, r24
    3f1c:	82 2b       	or	r24, r18
    3f1e:	93 2b       	or	r25, r19
    3f20:	12 96       	adiw	r26, 0x02	; 2
    3f22:	fa 01       	movw	r30, r20
    3f24:	0c 01       	movw	r0, r24
    3f26:	87 be       	out	0x37, r8	; 55
    3f28:	e8 95       	spm
    3f2a:	11 24       	eor	r1, r1
    3f2c:	4e 5f       	subi	r20, 0xFE	; 254
    3f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f30:	f1 e0       	ldi	r31, 0x01	; 1
    3f32:	a0 38       	cpi	r26, 0x80	; 128
    3f34:	bf 07       	cpc	r27, r31
    3f36:	51 f7       	brne	.-44     	; 0x3f0c <main+0x10c>
    3f38:	f6 01       	movw	r30, r12
    3f3a:	a7 be       	out	0x37, r10	; 55
    3f3c:	e8 95       	spm
    3f3e:	07 b6       	in	r0, 0x37	; 55
    3f40:	00 fc       	sbrc	r0, 0
    3f42:	fd cf       	rjmp	.-6      	; 0x3f3e <main+0x13e>
    3f44:	97 be       	out	0x37, r9	; 55
    3f46:	e8 95       	spm
    3f48:	26 c0       	rjmp	.+76     	; 0x3f96 <main+0x196>
    3f4a:	84 37       	cpi	r24, 0x74	; 116
    3f4c:	b1 f4       	brne	.+44     	; 0x3f7a <main+0x17a>
    3f4e:	2e d0       	rcall	.+92     	; 0x3fac <getch>
    3f50:	2d d0       	rcall	.+90     	; 0x3fac <getch>
    3f52:	f8 2e       	mov	r15, r24
    3f54:	2b d0       	rcall	.+86     	; 0x3fac <getch>
    3f56:	3c d0       	rcall	.+120    	; 0x3fd0 <verifySpace>
    3f58:	f6 01       	movw	r30, r12
    3f5a:	ef 2c       	mov	r14, r15
    3f5c:	8f 01       	movw	r16, r30
    3f5e:	0f 5f       	subi	r16, 0xFF	; 255
    3f60:	1f 4f       	sbci	r17, 0xFF	; 255
    3f62:	84 91       	lpm	r24, Z+
    3f64:	1b d0       	rcall	.+54     	; 0x3f9c <putch>
    3f66:	ea 94       	dec	r14
    3f68:	f8 01       	movw	r30, r16
    3f6a:	c1 f7       	brne	.-16     	; 0x3f5c <main+0x15c>
    3f6c:	08 94       	sec
    3f6e:	c1 1c       	adc	r12, r1
    3f70:	d1 1c       	adc	r13, r1
    3f72:	fa 94       	dec	r15
    3f74:	cf 0c       	add	r12, r15
    3f76:	d1 1c       	adc	r13, r1
    3f78:	0e c0       	rjmp	.+28     	; 0x3f96 <main+0x196>
    3f7a:	85 37       	cpi	r24, 0x75	; 117
    3f7c:	39 f4       	brne	.+14     	; 0x3f8c <main+0x18c>
    3f7e:	28 d0       	rcall	.+80     	; 0x3fd0 <verifySpace>
    3f80:	8e e1       	ldi	r24, 0x1E	; 30
    3f82:	0c d0       	rcall	.+24     	; 0x3f9c <putch>
    3f84:	84 e9       	ldi	r24, 0x94	; 148
    3f86:	0a d0       	rcall	.+20     	; 0x3f9c <putch>
    3f88:	8b e0       	ldi	r24, 0x0B	; 11
    3f8a:	7a cf       	rjmp	.-268    	; 0x3e80 <main+0x80>
    3f8c:	81 35       	cpi	r24, 0x51	; 81
    3f8e:	11 f4       	brne	.+4      	; 0x3f94 <main+0x194>
    3f90:	88 e0       	ldi	r24, 0x08	; 8
    3f92:	18 d0       	rcall	.+48     	; 0x3fc4 <watchdogConfig>
    3f94:	1d d0       	rcall	.+58     	; 0x3fd0 <verifySpace>
    3f96:	80 e1       	ldi	r24, 0x10	; 16
    3f98:	01 d0       	rcall	.+2      	; 0x3f9c <putch>
    3f9a:	65 cf       	rjmp	.-310    	; 0x3e66 <main+0x66>

00003f9c <putch>:
    }
    putch(STK_OK);
  }
}

void putch(char ch) {
    3f9c:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    3f9e:	80 91 c0 00 	lds	r24, 0x00C0
    3fa2:	85 ff       	sbrs	r24, 5
    3fa4:	fc cf       	rjmp	.-8      	; 0x3f9e <putch+0x2>
  UDR0 = ch;
    3fa6:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    3faa:	08 95       	ret

00003fac <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    3fac:	80 91 c0 00 	lds	r24, 0x00C0
    3fb0:	87 ff       	sbrs	r24, 7
    3fb2:	fc cf       	rjmp	.-8      	; 0x3fac <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    3fb4:	80 91 c0 00 	lds	r24, 0x00C0
    3fb8:	84 fd       	sbrc	r24, 4
    3fba:	01 c0       	rjmp	.+2      	; 0x3fbe <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3fbc:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    3fbe:	80 91 c6 00 	lds	r24, 0x00C6
#ifdef LED_DATA_FLASH
  LED_PORT ^= _BV(LED);
#endif

  return ch;
}
    3fc2:	08 95       	ret

00003fc4 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3fc4:	e0 e6       	ldi	r30, 0x60	; 96
    3fc6:	f0 e0       	ldi	r31, 0x00	; 0
    3fc8:	98 e1       	ldi	r25, 0x18	; 24
    3fca:	90 83       	st	Z, r25
  WDTCSR = x;
    3fcc:	80 83       	st	Z, r24
}
    3fce:	08 95       	ret

00003fd0 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    3fd0:	ed df       	rcall	.-38     	; 0x3fac <getch>
    3fd2:	80 32       	cpi	r24, 0x20	; 32
    3fd4:	19 f0       	breq	.+6      	; 0x3fdc <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3fd6:	88 e0       	ldi	r24, 0x08	; 8
    3fd8:	f5 df       	rcall	.-22     	; 0x3fc4 <watchdogConfig>
    3fda:	ff cf       	rjmp	.-2      	; 0x3fda <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    3fdc:	84 e1       	ldi	r24, 0x14	; 20
    3fde:	de cf       	rjmp	.-68     	; 0x3f9c <putch>

00003fe0 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fe0:	1f 93       	push	r17
    3fe2:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    3fe4:	e3 df       	rcall	.-58     	; 0x3fac <getch>
    3fe6:	11 50       	subi	r17, 0x01	; 1
    3fe8:	e9 f7       	brne	.-6      	; 0x3fe4 <getNch+0x4>
  verifySpace();
    3fea:	f2 df       	rcall	.-28     	; 0x3fd0 <verifySpace>
}
    3fec:	1f 91       	pop	r17
    3fee:	08 95       	ret

00003ff0 <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	e8 df       	rcall	.-48     	; 0x3fc4 <watchdogConfig>
  __asm__ __volatile__ (
    3ff4:	ee 27       	eor	r30, r30
    3ff6:	ff 27       	eor	r31, r31
    3ff8:	09 94       	ijmp
