
optiboot_m32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001de  00007e00  00007e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  00000232  2**0
                  CONTENTS, READONLY
  2 .stab         00000be8  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c17  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00007e00 <main>:
    7e00:	11 24       	eor	r1, r1
    7e02:	8f e5       	ldi	r24, 0x5F	; 95
    7e04:	98 e0       	ldi	r25, 0x08	; 8
    7e06:	9e bf       	out	0x3e, r25	; 62
    7e08:	8d bf       	out	0x3d, r24	; 61
    7e0a:	84 b7       	in	r24, 0x34	; 52
    7e0c:	14 be       	out	0x34, r1	; 52
    7e0e:	81 ff       	sbrs	r24, 1
    7e10:	e1 d0       	rcall	.+450    	; 0x7fd4 <appStart>
    7e12:	85 e0       	ldi	r24, 0x05	; 5
    7e14:	8e bd       	out	0x2e, r24	; 46
    7e16:	82 e0       	ldi	r24, 0x02	; 2
    7e18:	8b b9       	out	0x0b, r24	; 11
    7e1a:	88 e1       	ldi	r24, 0x18	; 24
    7e1c:	8a b9       	out	0x0a, r24	; 10
    7e1e:	86 e8       	ldi	r24, 0x86	; 134
    7e20:	80 bd       	out	0x20, r24	; 32
    7e22:	80 e1       	ldi	r24, 0x10	; 16
    7e24:	89 b9       	out	0x09, r24	; 9
    7e26:	8e e0       	ldi	r24, 0x0E	; 14
    7e28:	c1 d0       	rcall	.+386    	; 0x7fac <watchdogConfig>
    7e2a:	bd 9a       	sbi	0x17, 5	; 23
    7e2c:	96 e0       	ldi	r25, 0x06	; 6
    7e2e:	20 e3       	ldi	r18, 0x30	; 48
    7e30:	3c ef       	ldi	r19, 0xFC	; 252
    7e32:	54 e0       	ldi	r21, 0x04	; 4
    7e34:	40 e2       	ldi	r20, 0x20	; 32
    7e36:	3d bd       	out	0x2d, r19	; 45
    7e38:	2c bd       	out	0x2c, r18	; 44
    7e3a:	58 bf       	out	0x38, r21	; 56
    7e3c:	08 b6       	in	r0, 0x38	; 56
    7e3e:	02 fe       	sbrs	r0, 2
    7e40:	fd cf       	rjmp	.-6      	; 0x7e3c <main+0x3c>
    7e42:	88 b3       	in	r24, 0x18	; 24
    7e44:	84 27       	eor	r24, r20
    7e46:	88 bb       	out	0x18, r24	; 24
    7e48:	a8 95       	wdr
    7e4a:	91 50       	subi	r25, 0x01	; 1
    7e4c:	a1 f7       	brne	.-24     	; 0x7e36 <main+0x36>
    7e4e:	cc 24       	eor	r12, r12
    7e50:	dd 24       	eor	r13, r13
    7e52:	99 24       	eor	r9, r9
    7e54:	93 94       	inc	r9
    7e56:	b5 e0       	ldi	r27, 0x05	; 5
    7e58:	8b 2e       	mov	r8, r27
    7e5a:	a1 e1       	ldi	r26, 0x11	; 17
    7e5c:	aa 2e       	mov	r10, r26
    7e5e:	f3 e0       	ldi	r31, 0x03	; 3
    7e60:	bf 2e       	mov	r11, r31
    7e62:	9d d0       	rcall	.+314    	; 0x7f9e <getch>
    7e64:	81 34       	cpi	r24, 0x41	; 65
    7e66:	61 f4       	brne	.+24     	; 0x7e80 <main+0x80>
    7e68:	9a d0       	rcall	.+308    	; 0x7f9e <getch>
    7e6a:	08 2f       	mov	r16, r24
    7e6c:	a3 d0       	rcall	.+326    	; 0x7fb4 <verifySpace>
    7e6e:	02 38       	cpi	r16, 0x82	; 130
    7e70:	11 f0       	breq	.+4      	; 0x7e76 <main+0x76>
    7e72:	01 38       	cpi	r16, 0x81	; 129
    7e74:	11 f4       	brne	.+4      	; 0x7e7a <main+0x7a>
    7e76:	84 e0       	ldi	r24, 0x04	; 4
    7e78:	01 c0       	rjmp	.+2      	; 0x7e7c <main+0x7c>
    7e7a:	83 e0       	ldi	r24, 0x03	; 3
    7e7c:	8c d0       	rcall	.+280    	; 0x7f96 <putch>
    7e7e:	88 c0       	rjmp	.+272    	; 0x7f90 <main+0x190>
    7e80:	82 34       	cpi	r24, 0x42	; 66
    7e82:	11 f4       	brne	.+4      	; 0x7e88 <main+0x88>
    7e84:	84 e1       	ldi	r24, 0x14	; 20
    7e86:	03 c0       	rjmp	.+6      	; 0x7e8e <main+0x8e>
    7e88:	85 34       	cpi	r24, 0x45	; 69
    7e8a:	19 f4       	brne	.+6      	; 0x7e92 <main+0x92>
    7e8c:	85 e0       	ldi	r24, 0x05	; 5
    7e8e:	9a d0       	rcall	.+308    	; 0x7fc4 <getNch>
    7e90:	7f c0       	rjmp	.+254    	; 0x7f90 <main+0x190>
    7e92:	85 35       	cpi	r24, 0x55	; 85
    7e94:	79 f4       	brne	.+30     	; 0x7eb4 <main+0xb4>
    7e96:	83 d0       	rcall	.+262    	; 0x7f9e <getch>
    7e98:	e8 2e       	mov	r14, r24
    7e9a:	ff 24       	eor	r15, r15
    7e9c:	80 d0       	rcall	.+256    	; 0x7f9e <getch>
    7e9e:	08 2f       	mov	r16, r24
    7ea0:	10 e0       	ldi	r17, 0x00	; 0
    7ea2:	10 2f       	mov	r17, r16
    7ea4:	00 27       	eor	r16, r16
    7ea6:	0e 29       	or	r16, r14
    7ea8:	1f 29       	or	r17, r15
    7eaa:	00 0f       	add	r16, r16
    7eac:	11 1f       	adc	r17, r17
    7eae:	82 d0       	rcall	.+260    	; 0x7fb4 <verifySpace>
    7eb0:	68 01       	movw	r12, r16
    7eb2:	6e c0       	rjmp	.+220    	; 0x7f90 <main+0x190>
    7eb4:	86 35       	cpi	r24, 0x56	; 86
    7eb6:	21 f4       	brne	.+8      	; 0x7ec0 <main+0xc0>
    7eb8:	84 e0       	ldi	r24, 0x04	; 4
    7eba:	84 d0       	rcall	.+264    	; 0x7fc4 <getNch>
    7ebc:	80 e0       	ldi	r24, 0x00	; 0
    7ebe:	de cf       	rjmp	.-68     	; 0x7e7c <main+0x7c>
    7ec0:	84 36       	cpi	r24, 0x64	; 100
    7ec2:	09 f0       	breq	.+2      	; 0x7ec6 <main+0xc6>
    7ec4:	3f c0       	rjmp	.+126    	; 0x7f44 <main+0x144>
    7ec6:	6b d0       	rcall	.+214    	; 0x7f9e <getch>
    7ec8:	6a d0       	rcall	.+212    	; 0x7f9e <getch>
    7eca:	08 2f       	mov	r16, r24
    7ecc:	68 d0       	rcall	.+208    	; 0x7f9e <getch>
    7ece:	80 e0       	ldi	r24, 0x00	; 0
    7ed0:	c8 16       	cp	r12, r24
    7ed2:	88 e3       	ldi	r24, 0x38	; 56
    7ed4:	d8 06       	cpc	r13, r24
    7ed6:	18 f4       	brcc	.+6      	; 0x7ede <main+0xde>
    7ed8:	f6 01       	movw	r30, r12
    7eda:	b7 be       	out	0x37, r11	; 55
    7edc:	e8 95       	spm
    7ede:	c0 e6       	ldi	r28, 0x60	; 96
    7ee0:	d0 e0       	ldi	r29, 0x00	; 0
    7ee2:	5d d0       	rcall	.+186    	; 0x7f9e <getch>
    7ee4:	89 93       	st	Y+, r24
    7ee6:	01 50       	subi	r16, 0x01	; 1
    7ee8:	e1 f7       	brne	.-8      	; 0x7ee2 <main+0xe2>
    7eea:	f0 e0       	ldi	r31, 0x00	; 0
    7eec:	cf 16       	cp	r12, r31
    7eee:	f8 e3       	ldi	r31, 0x38	; 56
    7ef0:	df 06       	cpc	r13, r31
    7ef2:	18 f0       	brcs	.+6      	; 0x7efa <main+0xfa>
    7ef4:	f6 01       	movw	r30, r12
    7ef6:	b7 be       	out	0x37, r11	; 55
    7ef8:	e8 95       	spm
    7efa:	5c d0       	rcall	.+184    	; 0x7fb4 <verifySpace>
    7efc:	07 b6       	in	r0, 0x37	; 55
    7efe:	00 fc       	sbrc	r0, 0
    7f00:	fd cf       	rjmp	.-6      	; 0x7efc <main+0xfc>
    7f02:	a6 01       	movw	r20, r12
    7f04:	a0 e6       	ldi	r26, 0x60	; 96
    7f06:	b0 e0       	ldi	r27, 0x00	; 0
    7f08:	2c 91       	ld	r18, X
    7f0a:	30 e0       	ldi	r19, 0x00	; 0
    7f0c:	11 96       	adiw	r26, 0x01	; 1
    7f0e:	8c 91       	ld	r24, X
    7f10:	11 97       	sbiw	r26, 0x01	; 1
    7f12:	90 e0       	ldi	r25, 0x00	; 0
    7f14:	98 2f       	mov	r25, r24
    7f16:	88 27       	eor	r24, r24
    7f18:	82 2b       	or	r24, r18
    7f1a:	93 2b       	or	r25, r19
    7f1c:	12 96       	adiw	r26, 0x02	; 2
    7f1e:	fa 01       	movw	r30, r20
    7f20:	0c 01       	movw	r0, r24
    7f22:	97 be       	out	0x37, r9	; 55
    7f24:	e8 95       	spm
    7f26:	11 24       	eor	r1, r1
    7f28:	4e 5f       	subi	r20, 0xFE	; 254
    7f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    7f2c:	a0 3e       	cpi	r26, 0xE0	; 224
    7f2e:	b1 05       	cpc	r27, r1
    7f30:	59 f7       	brne	.-42     	; 0x7f08 <main+0x108>
    7f32:	f6 01       	movw	r30, r12
    7f34:	87 be       	out	0x37, r8	; 55
    7f36:	e8 95       	spm
    7f38:	07 b6       	in	r0, 0x37	; 55
    7f3a:	00 fc       	sbrc	r0, 0
    7f3c:	fd cf       	rjmp	.-6      	; 0x7f38 <main+0x138>
    7f3e:	a7 be       	out	0x37, r10	; 55
    7f40:	e8 95       	spm
    7f42:	26 c0       	rjmp	.+76     	; 0x7f90 <main+0x190>
    7f44:	84 37       	cpi	r24, 0x74	; 116
    7f46:	b1 f4       	brne	.+44     	; 0x7f74 <main+0x174>
    7f48:	2a d0       	rcall	.+84     	; 0x7f9e <getch>
    7f4a:	29 d0       	rcall	.+82     	; 0x7f9e <getch>
    7f4c:	f8 2e       	mov	r15, r24
    7f4e:	27 d0       	rcall	.+78     	; 0x7f9e <getch>
    7f50:	31 d0       	rcall	.+98     	; 0x7fb4 <verifySpace>
    7f52:	f6 01       	movw	r30, r12
    7f54:	ef 2c       	mov	r14, r15
    7f56:	8f 01       	movw	r16, r30
    7f58:	0f 5f       	subi	r16, 0xFF	; 255
    7f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    7f5c:	84 91       	lpm	r24, Z+
    7f5e:	1b d0       	rcall	.+54     	; 0x7f96 <putch>
    7f60:	ea 94       	dec	r14
    7f62:	f8 01       	movw	r30, r16
    7f64:	c1 f7       	brne	.-16     	; 0x7f56 <main+0x156>
    7f66:	08 94       	sec
    7f68:	c1 1c       	adc	r12, r1
    7f6a:	d1 1c       	adc	r13, r1
    7f6c:	fa 94       	dec	r15
    7f6e:	cf 0c       	add	r12, r15
    7f70:	d1 1c       	adc	r13, r1
    7f72:	0e c0       	rjmp	.+28     	; 0x7f90 <main+0x190>
    7f74:	85 37       	cpi	r24, 0x75	; 117
    7f76:	39 f4       	brne	.+14     	; 0x7f86 <main+0x186>
    7f78:	1d d0       	rcall	.+58     	; 0x7fb4 <verifySpace>
    7f7a:	8e e1       	ldi	r24, 0x1E	; 30
    7f7c:	0c d0       	rcall	.+24     	; 0x7f96 <putch>
    7f7e:	85 e9       	ldi	r24, 0x95	; 149
    7f80:	0a d0       	rcall	.+20     	; 0x7f96 <putch>
    7f82:	82 e0       	ldi	r24, 0x02	; 2
    7f84:	7b cf       	rjmp	.-266    	; 0x7e7c <main+0x7c>
    7f86:	81 35       	cpi	r24, 0x51	; 81
    7f88:	11 f4       	brne	.+4      	; 0x7f8e <main+0x18e>
    7f8a:	88 e0       	ldi	r24, 0x08	; 8
    7f8c:	0f d0       	rcall	.+30     	; 0x7fac <watchdogConfig>
    7f8e:	12 d0       	rcall	.+36     	; 0x7fb4 <verifySpace>
    7f90:	80 e1       	ldi	r24, 0x10	; 16
    7f92:	01 d0       	rcall	.+2      	; 0x7f96 <putch>
    7f94:	66 cf       	rjmp	.-308    	; 0x7e62 <main+0x62>

00007f96 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    7f96:	5d 9b       	sbis	0x0b, 5	; 11
    7f98:	fe cf       	rjmp	.-4      	; 0x7f96 <putch>
  UDR0 = ch;
    7f9a:	8c b9       	out	0x0c, r24	; 12
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7f9c:	08 95       	ret

00007f9e <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    7f9e:	5f 9b       	sbis	0x0b, 7	; 11
    7fa0:	fe cf       	rjmp	.-4      	; 0x7f9e <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    7fa2:	5c 99       	sbic	0x0b, 4	; 11
    7fa4:	01 c0       	rjmp	.+2      	; 0x7fa8 <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7fa6:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    7fa8:	8c b1       	in	r24, 0x0c	; 12
#ifdef LED_DATA_FLASH
  LED_PORT ^= _BV(LED);
#endif

  return ch;
}
    7faa:	08 95       	ret

00007fac <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fac:	98 e1       	ldi	r25, 0x18	; 24
    7fae:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    7fb0:	81 bd       	out	0x21, r24	; 33
}
    7fb2:	08 95       	ret

00007fb4 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fb4:	f4 df       	rcall	.-24     	; 0x7f9e <getch>
    7fb6:	80 32       	cpi	r24, 0x20	; 32
    7fb8:	19 f0       	breq	.+6      	; 0x7fc0 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fba:	88 e0       	ldi	r24, 0x08	; 8
    7fbc:	f7 df       	rcall	.-18     	; 0x7fac <watchdogConfig>
    7fbe:	ff cf       	rjmp	.-2      	; 0x7fbe <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fc0:	84 e1       	ldi	r24, 0x14	; 20
    7fc2:	e9 cf       	rjmp	.-46     	; 0x7f96 <putch>

00007fc4 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fc4:	1f 93       	push	r17
    7fc6:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    7fc8:	ea df       	rcall	.-44     	; 0x7f9e <getch>
    7fca:	11 50       	subi	r17, 0x01	; 1
    7fcc:	e9 f7       	brne	.-6      	; 0x7fc8 <getNch+0x4>
  verifySpace();
    7fce:	f2 df       	rcall	.-28     	; 0x7fb4 <verifySpace>
}
    7fd0:	1f 91       	pop	r17
    7fd2:	08 95       	ret

00007fd4 <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    7fd4:	80 e0       	ldi	r24, 0x00	; 0
    7fd6:	ea df       	rcall	.-44     	; 0x7fac <watchdogConfig>
  __asm__ __volatile__ (
    7fd8:	ee 27       	eor	r30, r30
    7fda:	ff 27       	eor	r31, r31
    7fdc:	09 94       	ijmp
