
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  00007e00  00007e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  0000024e  2**0
                  CONTENTS, READONLY
  2 .stab         00000bdc  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c2c  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00007e00 <main>:
    7e00:	11 24       	eor	r1, r1
    7e02:	84 b7       	in	r24, 0x34	; 52
    7e04:	14 be       	out	0x34, r1	; 52
    7e06:	81 ff       	sbrs	r24, 1
    7e08:	f3 d0       	rcall	.+486    	; 0x7ff0 <appStart>
    7e0a:	85 e0       	ldi	r24, 0x05	; 5
    7e0c:	80 93 81 00 	sts	0x0081, r24
    7e10:	82 e0       	ldi	r24, 0x02	; 2
    7e12:	80 93 c0 00 	sts	0x00C0, r24
    7e16:	88 e1       	ldi	r24, 0x18	; 24
    7e18:	80 93 c1 00 	sts	0x00C1, r24
    7e1c:	86 e0       	ldi	r24, 0x06	; 6
    7e1e:	80 93 c2 00 	sts	0x00C2, r24
    7e22:	80 e1       	ldi	r24, 0x10	; 16
    7e24:	80 93 c4 00 	sts	0x00C4, r24
    7e28:	8e e0       	ldi	r24, 0x0E	; 14
    7e2a:	cc d0       	rcall	.+408    	; 0x7fc4 <watchdogConfig>
    7e2c:	25 9a       	sbi	0x04, 5	; 4
    7e2e:	96 e0       	ldi	r25, 0x06	; 6
    7e30:	20 e3       	ldi	r18, 0x30	; 48
    7e32:	3c ef       	ldi	r19, 0xFC	; 252
    7e34:	51 e0       	ldi	r21, 0x01	; 1
    7e36:	40 e2       	ldi	r20, 0x20	; 32
    7e38:	30 93 85 00 	sts	0x0085, r19
    7e3c:	20 93 84 00 	sts	0x0084, r18
    7e40:	56 bb       	out	0x16, r21	; 22
    7e42:	b0 9b       	sbis	0x16, 0	; 22
    7e44:	fe cf       	rjmp	.-4      	; 0x7e42 <main+0x42>
    7e46:	85 b1       	in	r24, 0x05	; 5
    7e48:	84 27       	eor	r24, r20
    7e4a:	85 b9       	out	0x05, r24	; 5
    7e4c:	a8 95       	wdr
    7e4e:	91 50       	subi	r25, 0x01	; 1
    7e50:	99 f7       	brne	.-26     	; 0x7e38 <main+0x38>
    7e52:	cc 24       	eor	r12, r12
    7e54:	dd 24       	eor	r13, r13
    7e56:	88 24       	eor	r8, r8
    7e58:	83 94       	inc	r8
    7e5a:	b5 e0       	ldi	r27, 0x05	; 5
    7e5c:	ab 2e       	mov	r10, r27
    7e5e:	a1 e1       	ldi	r26, 0x11	; 17
    7e60:	9a 2e       	mov	r9, r26
    7e62:	f3 e0       	ldi	r31, 0x03	; 3
    7e64:	bf 2e       	mov	r11, r31
    7e66:	a2 d0       	rcall	.+324    	; 0x7fac <getch>
    7e68:	81 34       	cpi	r24, 0x41	; 65
    7e6a:	61 f4       	brne	.+24     	; 0x7e84 <main+0x84>
    7e6c:	9f d0       	rcall	.+318    	; 0x7fac <getch>
    7e6e:	08 2f       	mov	r16, r24
    7e70:	af d0       	rcall	.+350    	; 0x7fd0 <verifySpace>
    7e72:	02 38       	cpi	r16, 0x82	; 130
    7e74:	11 f0       	breq	.+4      	; 0x7e7a <main+0x7a>
    7e76:	01 38       	cpi	r16, 0x81	; 129
    7e78:	11 f4       	brne	.+4      	; 0x7e7e <main+0x7e>
    7e7a:	84 e0       	ldi	r24, 0x04	; 4
    7e7c:	01 c0       	rjmp	.+2      	; 0x7e80 <main+0x80>
    7e7e:	83 e0       	ldi	r24, 0x03	; 3
    7e80:	8d d0       	rcall	.+282    	; 0x7f9c <putch>
    7e82:	89 c0       	rjmp	.+274    	; 0x7f96 <main+0x196>
    7e84:	82 34       	cpi	r24, 0x42	; 66
    7e86:	11 f4       	brne	.+4      	; 0x7e8c <main+0x8c>
    7e88:	84 e1       	ldi	r24, 0x14	; 20
    7e8a:	03 c0       	rjmp	.+6      	; 0x7e92 <main+0x92>
    7e8c:	85 34       	cpi	r24, 0x45	; 69
    7e8e:	19 f4       	brne	.+6      	; 0x7e96 <main+0x96>
    7e90:	85 e0       	ldi	r24, 0x05	; 5
    7e92:	a6 d0       	rcall	.+332    	; 0x7fe0 <getNch>
    7e94:	80 c0       	rjmp	.+256    	; 0x7f96 <main+0x196>
    7e96:	85 35       	cpi	r24, 0x55	; 85
    7e98:	79 f4       	brne	.+30     	; 0x7eb8 <main+0xb8>
    7e9a:	88 d0       	rcall	.+272    	; 0x7fac <getch>
    7e9c:	e8 2e       	mov	r14, r24
    7e9e:	ff 24       	eor	r15, r15
    7ea0:	85 d0       	rcall	.+266    	; 0x7fac <getch>
    7ea2:	08 2f       	mov	r16, r24
    7ea4:	10 e0       	ldi	r17, 0x00	; 0
    7ea6:	10 2f       	mov	r17, r16
    7ea8:	00 27       	eor	r16, r16
    7eaa:	0e 29       	or	r16, r14
    7eac:	1f 29       	or	r17, r15
    7eae:	00 0f       	add	r16, r16
    7eb0:	11 1f       	adc	r17, r17
    7eb2:	8e d0       	rcall	.+284    	; 0x7fd0 <verifySpace>
    7eb4:	68 01       	movw	r12, r16
    7eb6:	6f c0       	rjmp	.+222    	; 0x7f96 <main+0x196>
    7eb8:	86 35       	cpi	r24, 0x56	; 86
    7eba:	21 f4       	brne	.+8      	; 0x7ec4 <main+0xc4>
    7ebc:	84 e0       	ldi	r24, 0x04	; 4
    7ebe:	90 d0       	rcall	.+288    	; 0x7fe0 <getNch>
    7ec0:	80 e0       	ldi	r24, 0x00	; 0
    7ec2:	de cf       	rjmp	.-68     	; 0x7e80 <main+0x80>
    7ec4:	84 36       	cpi	r24, 0x64	; 100
    7ec6:	09 f0       	breq	.+2      	; 0x7eca <main+0xca>
    7ec8:	40 c0       	rjmp	.+128    	; 0x7f4a <main+0x14a>
    7eca:	70 d0       	rcall	.+224    	; 0x7fac <getch>
    7ecc:	6f d0       	rcall	.+222    	; 0x7fac <getch>
    7ece:	08 2f       	mov	r16, r24
    7ed0:	6d d0       	rcall	.+218    	; 0x7fac <getch>
    7ed2:	80 e0       	ldi	r24, 0x00	; 0
    7ed4:	c8 16       	cp	r12, r24
    7ed6:	88 e3       	ldi	r24, 0x38	; 56
    7ed8:	d8 06       	cpc	r13, r24
    7eda:	18 f4       	brcc	.+6      	; 0x7ee2 <main+0xe2>
    7edc:	f6 01       	movw	r30, r12
    7ede:	b7 be       	out	0x37, r11	; 55
    7ee0:	e8 95       	spm
    7ee2:	c0 e0       	ldi	r28, 0x00	; 0
    7ee4:	d1 e0       	ldi	r29, 0x01	; 1
    7ee6:	62 d0       	rcall	.+196    	; 0x7fac <getch>
    7ee8:	89 93       	st	Y+, r24
    7eea:	0c 17       	cp	r16, r28
    7eec:	e1 f7       	brne	.-8      	; 0x7ee6 <main+0xe6>
    7eee:	f0 e0       	ldi	r31, 0x00	; 0
    7ef0:	cf 16       	cp	r12, r31
    7ef2:	f8 e3       	ldi	r31, 0x38	; 56
    7ef4:	df 06       	cpc	r13, r31
    7ef6:	18 f0       	brcs	.+6      	; 0x7efe <main+0xfe>
    7ef8:	f6 01       	movw	r30, r12
    7efa:	b7 be       	out	0x37, r11	; 55
    7efc:	e8 95       	spm
    7efe:	68 d0       	rcall	.+208    	; 0x7fd0 <verifySpace>
    7f00:	07 b6       	in	r0, 0x37	; 55
    7f02:	00 fc       	sbrc	r0, 0
    7f04:	fd cf       	rjmp	.-6      	; 0x7f00 <main+0x100>
    7f06:	a6 01       	movw	r20, r12
    7f08:	a0 e0       	ldi	r26, 0x00	; 0
    7f0a:	b1 e0       	ldi	r27, 0x01	; 1
    7f0c:	2c 91       	ld	r18, X
    7f0e:	30 e0       	ldi	r19, 0x00	; 0
    7f10:	11 96       	adiw	r26, 0x01	; 1
    7f12:	8c 91       	ld	r24, X
    7f14:	11 97       	sbiw	r26, 0x01	; 1
    7f16:	90 e0       	ldi	r25, 0x00	; 0
    7f18:	98 2f       	mov	r25, r24
    7f1a:	88 27       	eor	r24, r24
    7f1c:	82 2b       	or	r24, r18
    7f1e:	93 2b       	or	r25, r19
    7f20:	12 96       	adiw	r26, 0x02	; 2
    7f22:	fa 01       	movw	r30, r20
    7f24:	0c 01       	movw	r0, r24
    7f26:	87 be       	out	0x37, r8	; 55
    7f28:	e8 95       	spm
    7f2a:	11 24       	eor	r1, r1
    7f2c:	4e 5f       	subi	r20, 0xFE	; 254
    7f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    7f30:	f1 e0       	ldi	r31, 0x01	; 1
    7f32:	a0 38       	cpi	r26, 0x80	; 128
    7f34:	bf 07       	cpc	r27, r31
    7f36:	51 f7       	brne	.-44     	; 0x7f0c <main+0x10c>
    7f38:	f6 01       	movw	r30, r12
    7f3a:	a7 be       	out	0x37, r10	; 55
    7f3c:	e8 95       	spm
    7f3e:	07 b6       	in	r0, 0x37	; 55
    7f40:	00 fc       	sbrc	r0, 0
    7f42:	fd cf       	rjmp	.-6      	; 0x7f3e <main+0x13e>
    7f44:	97 be       	out	0x37, r9	; 55
    7f46:	e8 95       	spm
    7f48:	26 c0       	rjmp	.+76     	; 0x7f96 <main+0x196>
    7f4a:	84 37       	cpi	r24, 0x74	; 116
    7f4c:	b1 f4       	brne	.+44     	; 0x7f7a <main+0x17a>
    7f4e:	2e d0       	rcall	.+92     	; 0x7fac <getch>
    7f50:	2d d0       	rcall	.+90     	; 0x7fac <getch>
    7f52:	f8 2e       	mov	r15, r24
    7f54:	2b d0       	rcall	.+86     	; 0x7fac <getch>
    7f56:	3c d0       	rcall	.+120    	; 0x7fd0 <verifySpace>
    7f58:	f6 01       	movw	r30, r12
    7f5a:	ef 2c       	mov	r14, r15
    7f5c:	8f 01       	movw	r16, r30
    7f5e:	0f 5f       	subi	r16, 0xFF	; 255
    7f60:	1f 4f       	sbci	r17, 0xFF	; 255
    7f62:	84 91       	lpm	r24, Z+
    7f64:	1b d0       	rcall	.+54     	; 0x7f9c <putch>
    7f66:	ea 94       	dec	r14
    7f68:	f8 01       	movw	r30, r16
    7f6a:	c1 f7       	brne	.-16     	; 0x7f5c <main+0x15c>
    7f6c:	08 94       	sec
    7f6e:	c1 1c       	adc	r12, r1
    7f70:	d1 1c       	adc	r13, r1
    7f72:	fa 94       	dec	r15
    7f74:	cf 0c       	add	r12, r15
    7f76:	d1 1c       	adc	r13, r1
    7f78:	0e c0       	rjmp	.+28     	; 0x7f96 <main+0x196>
    7f7a:	85 37       	cpi	r24, 0x75	; 117
    7f7c:	39 f4       	brne	.+14     	; 0x7f8c <main+0x18c>
    7f7e:	28 d0       	rcall	.+80     	; 0x7fd0 <verifySpace>
    7f80:	8e e1       	ldi	r24, 0x1E	; 30
    7f82:	0c d0       	rcall	.+24     	; 0x7f9c <putch>
    7f84:	85 e9       	ldi	r24, 0x95	; 149
    7f86:	0a d0       	rcall	.+20     	; 0x7f9c <putch>
    7f88:	8f e0       	ldi	r24, 0x0F	; 15
    7f8a:	7a cf       	rjmp	.-268    	; 0x7e80 <main+0x80>
    7f8c:	81 35       	cpi	r24, 0x51	; 81
    7f8e:	11 f4       	brne	.+4      	; 0x7f94 <main+0x194>
    7f90:	88 e0       	ldi	r24, 0x08	; 8
    7f92:	18 d0       	rcall	.+48     	; 0x7fc4 <watchdogConfig>
    7f94:	1d d0       	rcall	.+58     	; 0x7fd0 <verifySpace>
    7f96:	80 e1       	ldi	r24, 0x10	; 16
    7f98:	01 d0       	rcall	.+2      	; 0x7f9c <putch>
    7f9a:	65 cf       	rjmp	.-310    	; 0x7e66 <main+0x66>

00007f9c <putch>:
    }
    putch(STK_OK);
  }
}

void putch(char ch) {
    7f9c:	98 2f       	mov	r25, r24
#ifndef SOFT_UART
  while (!(UCSR0A & _BV(UDRE0)));
    7f9e:	80 91 c0 00 	lds	r24, 0x00C0
    7fa2:	85 ff       	sbrs	r24, 5
    7fa4:	fc cf       	rjmp	.-8      	; 0x7f9e <putch+0x2>
  UDR0 = ch;
    7fa6:	90 93 c6 00 	sts	0x00C6, r25
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    7faa:	08 95       	ret

00007fac <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UCSR0A & _BV(RXC0)))
    7fac:	80 91 c0 00 	lds	r24, 0x00C0
    7fb0:	87 ff       	sbrs	r24, 7
    7fb2:	fc cf       	rjmp	.-8      	; 0x7fac <getch>
    ;
  if (!(UCSR0A & _BV(FE0))) {
    7fb4:	80 91 c0 00 	lds	r24, 0x00C0
    7fb8:	84 fd       	sbrc	r24, 4
    7fba:	01 c0       	rjmp	.+2      	; 0x7fbe <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7fbc:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UDR0;
    7fbe:	80 91 c6 00 	lds	r24, 0x00C6
#ifdef LED_DATA_FLASH
  LED_PORT ^= _BV(LED);
#endif

  return ch;
}
    7fc2:	08 95       	ret

00007fc4 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fc4:	e0 e6       	ldi	r30, 0x60	; 96
    7fc6:	f0 e0       	ldi	r31, 0x00	; 0
    7fc8:	98 e1       	ldi	r25, 0x18	; 24
    7fca:	90 83       	st	Z, r25
  WDTCSR = x;
    7fcc:	80 83       	st	Z, r24
}
    7fce:	08 95       	ret

00007fd0 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fd0:	ed df       	rcall	.-38     	; 0x7fac <getch>
    7fd2:	80 32       	cpi	r24, 0x20	; 32
    7fd4:	19 f0       	breq	.+6      	; 0x7fdc <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fd6:	88 e0       	ldi	r24, 0x08	; 8
    7fd8:	f5 df       	rcall	.-22     	; 0x7fc4 <watchdogConfig>
    7fda:	ff cf       	rjmp	.-2      	; 0x7fda <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fdc:	84 e1       	ldi	r24, 0x14	; 20
    7fde:	de cf       	rjmp	.-68     	; 0x7f9c <putch>

00007fe0 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fe0:	1f 93       	push	r17
    7fe2:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    7fe4:	e3 df       	rcall	.-58     	; 0x7fac <getch>
    7fe6:	11 50       	subi	r17, 0x01	; 1
    7fe8:	e9 f7       	brne	.-6      	; 0x7fe4 <getNch+0x4>
  verifySpace();
    7fea:	f2 df       	rcall	.-28     	; 0x7fd0 <verifySpace>
}
    7fec:	1f 91       	pop	r17
    7fee:	08 95       	ret

00007ff0 <appStart>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
  WDTCSR = x;
}

void appStart() {
  watchdogConfig(WATCHDOG_OFF);
    7ff0:	80 e0       	ldi	r24, 0x00	; 0
    7ff2:	e8 df       	rcall	.-48     	; 0x7fc4 <watchdogConfig>
  __asm__ __volatile__ (
    7ff4:	ee 27       	eor	r30, r30
    7ff6:	ff 27       	eor	r31, r31
    7ff8:	09 94       	ijmp
